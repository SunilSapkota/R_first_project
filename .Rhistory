#Task 1: Plotting those graphs
plot(X.ts,main = "Time Series Plot of X Signal", xlab = "Time", ylab = "Input Signal")
plot(X,Y)
plot(X,Y)
plot(X,TI)
plot(X,Ti)
avon(first_model)
anova(first_model)
plot(first_model)
#Second model
second_model <- lm ( Y ~ I(X4) + I(X1^3) + I(X1^3) + I(X3^4), data = data_frame)
anova(second_model)
plot(second_model)
#Third model
Third_model <- lm ( Y ~ I(X3^3) + I(X3^4), data = data_frame)
#Third model
third_model <- lm ( Y ~ I(X3^3) + I(X3^4), data = data_frame)
anova(third_model)
plot(third_model)
#Forth model
fourth_model <- lm(Y ~ I(X2) + I(X1^3) + I(X3^4), data = data_frame)
anova(fourth_model)
plot(fourth_model)
#Fifth model
fifth_model <- lm (Y ~ x4 + I(X1^2)+ I (X1^3) + I (X3^4), data = data_frame)
#Fifth model
fifth_model <- lm (Y ~ X4 + I(X1^2)+ I (X1^3) + I (X3^4), data = data_frame)
anova(fifth_model)
plot(fifth_model)
anova(first_model)
summary(first_model)
year <- c(2000 ,   2001  ,  2002  ,  2003 ,   2004)
rate <- c(9.34 ,   8.50  ,  7.62  ,  6.93  ,  6.60)
plot(year,rate,
main="Commercial Banks Interest Rate for 4 Year Car Loan",
sub="http://www.federalreserve.gov/releases/g19/20050805/")
cor(year,rate)
fit <- lm(rate ~ year)
plot(fit)
fit
list(fit)
list(fit)
attributes(fit)
residuals
attributes(data_frame)
attributes(X)
fit$coefficients
attributes(first_model)
first_model$residuals
sum(first_model$residuals^2)
#Task 2.2 Residual error
#Residual error of first model
sum(first_model$residuals^2)
#Residual error of Second model
sum(second_model$residuals^2)
#Residual error of Third model
sum(third_model$residuals^2)
#Residual error of Fourth model
sum(fourth_model$residuals^2)
#Residual error of Fifth model
sum(fifth_model$residuals^2)
x<- 1:5
lmx <- lm(x ~ 1)
utils::str(logLik(lmx))
lmx
plot(lmx)
attributes(lmx)
lmx
aaa<-logLik(lmx) # using print.logLik() method
aaa
attributes(aaa)
attributes(lmx)
## lm method
(fm1 <- lm(rating ~ ., data = attitude))
logLik(fm1)
logLik(fm1, REML = TRUE)
utils::data(Orthodont, package = "nlme")
fm1 <- lm(distance ~ Sex * age, Orthodont)
logLik(fm1)
logLik(fm1, REML = TRUE)
fit$coefficients
()
#Task 2.3
#Log likelihood function
logLik(first_model)
#Task 2.3
#Log likelihood function
#
logLik(first_model)
#Task 2.3
#Log likelihood function of First model
logLik(first_model)
#Log likelihood function of Second model
logLik(second_model)
#Log likelihood function of Third model
logLik(third_model)
#Log likelihood function of Fourth model
logLik(fourth_model)
#Log likelihood function of Fifth model
logLik(fifth_model)
lybrary(broom)
library(broom)
glance(first_model)
library(broom)
#Task 2.3 and 2.4
#Log likelihood function, AIC and  BIC of First model
glance(first_model)
#Log likelihood function of AIC and  BIC Second model
glance(second_model)
#Log likelihood function of AIC and  BIC Second model
glance(second_model)
#Log likelihood function of AIC and  BIC Third model
glance(third_model)
#Log likelihood function of AIC and  BIC Fourth model
glance(fourth_model)
#Log likelihood function of AIC and  BIC Fifth model
glance(fifth_model)
plot(fourth_model)
anova(first_model)
summary(first_model)
plot(first_model, which=2)
#For Fifth model
plot(fifth_model, which=2)
#For Second model
plot(second_model, which=2)
#For Second model
plot(second_model, which=2)
#For Forth model
plot(fourth_model, which=2)
#For Fifth model
plot(fifth_model, which=2)
# Creating a Histogram of X signal
hist(as.matrix(X),freq = FALSE,main = "Histogram of signal X ")
#Task 2.7
#Splitting the data set into train and test data set
train_data <- data_frame[1:141,]
test_data <- data_frame [142:201,]
attributes(first_model)
print(first_model$coefficients)
first_model$coefficients
161*1270
length(data_frame)
?length
length(data_frame)
length(data_frame,row=TRUE)
summary(data_frame)
nrow(data_frame)
=201*.7
201*.7
hh=runif(nrow(data_frame))
hh
?runif
#Task 2.7
#Splitting the data set into train and test data set
#splitting 70% to train and 30% to test
#Splitting the data set ramdomly
set.seed(123)
rn=runif(nrow(data_frame))
dfrn= data_frame[order(rn),]
train_data <- dfrn[1:141,]
train_data <- dfrn[1:141,]
test_data <- dfrn [142:201,]
head(train_data)
head(test_data)
str(data_frame)
?initial_split
??initial_split
data(mtcars)
set.seed(1353)
car_split <- initial_split(mtcars)
library(r.sample)
library(rsample)
library(rsample)
library(rsample)
library(rsample)
library(rsample)
library(matlib)
install.packages("rsample")
library(rsample)
library(rsample)
data(mtcars)
set.seed(1353)
car_split <- initial_split(mtcars)
attributes(car_split)
head(car_split)
str(car_split)
train_data <- training(car_split)
test_data <- testing(car_split)
head(train)
head(train_data)
dfs=initial_split(data_frame,prop = .7)
dfstrain=training(dfs)
dfstest=testing(dfs)
head(dfstest)
nrow(dfstest)
201-61
dfs=initial_split(data_frame,prop = .7)
dfstrain=training(dfs)
dfstest=testing(dfs)
head(car_split)
head(train_data)
train_data
mtcars
nrow(mtcars)
?predict
predictY=predict(second_model,dfstrain)
predictY
trfirst_model= lm(Y ~ I(X4) + I(X1^3) + I(X1^3) + I(X3^4), data = dfstrain)
#Training data from training data set
trfirst_model= lm(Y ~ I(X4) + I(X1^3) + I(X1^3) + I(X3^4), data = dfstrain)
install.packages("MASS")
library(MASS)
#Running stepAIC test for a model
Strfirst_model= stepAIC(trfirst_model,direction = "both")
vif(Strfirst_model)
install.packages("car")
install.packages("corrplot")
#Training data from training data set
trfirst_model= lm(Y ~ I(X4) + I(X1^3) + I(X1^3) + I(X3^4), data = dfstrain)
#Testing the model
predictY=predict(trfirst_model,dfstest)
#Adding the predicted data in test data frame
dfstest["P"]=predictY
dfstest
view(dfstest)
#Plotting scatter plot of Test data and Predicted data
plot(dfstest$P,dfstest$Y,xlab = "Actual Test Data",ylab = "Predicted Data")
abline(lm(dfstest$P~dfstest$Y))
#Plotting scatter plot of Test data and Predicted data
plot(dfstest$P,dfstest$Y,xlab = "Actual Test Data",ylab = "Predicted Data")
abline(lm(dfstest$P~dfstest$Y))
glance(trfirst_model)
#Mean square error
mean((fstest$P-dfstest$Y)^2)
#Mean square error
mean((dfstest$P-dfstest$Y)^2)
glance(trfirst_model)
#T-test with 95% confident level
t.test(dfstest$y,dfstest$p,mu=0,alt="two.sided",conf=.95)
#T-test with 95% confident level
t.test(dfstest$y~dfstest$p,mu=0,alt="two.sided",conf=.95)
#T-test with 95% confident level
t.test(dfstest$Y~dfstest$P,mu=0,alt="two.sided",conf=.95)
#T-test with 95% confident level
t.test(dfstest$Y,dfstest$P,mu=0,alt="two.sided",conf=.95)
#T-test with 95% confident level
tt=t.test(dfstest$Y,dfstest$P,mu=0,alt="two.sided",conf=.95)
attributes(tt)
tt$
```
tt$conf.int
tt$estimate
tt$conf.int[1]
tt
tt$conf.int
tt$conf.int
tt$conf.int[1]
tt$conf.int[2]
?gather
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_density()
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_point()
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_density(dfstest$Y)
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_point()+
geom_abline(methods(lm))
ggplot(dfstest,aes(dfstest$Y))+
geom_point()+
geom_abline())
ggplot(dfstest,aes(dfstest$Y))+
geom_point()
ggplot(dfstest,aes(dfstest$Y))+
geom_point()
ggplot(dfstest,aes(dfstest$Y,))+
geom_point()
ggplot(dfstest,aes(dfstest$Y,))+
geom_point(dfstest$P)
ggplot(dfstest,aes(dfstest$Y))+
geom_point(dfstest$P)
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_point(dfstest$P)
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_point()
ggplot(dfstest,aes(dfstest$Y,dfstest$P))+
geom_point()+
geom_smooth(method = lm)
ggplot(dfstest,aes())+
geom_point(dfstest$P)+
geom_smooth(method = lm)
ggplot(dfstest,aes())+
geom_point(dfstest$P)
ggplot(dfstest,aes(dfstest$P))+
geom_point()
plot(dfstest$P)
plot(dfstest$P,dfstest$Y)
plot(dfstest$P)
ggplot(dfstest,aes(,dfstest$P))+
geom_point()
ggplot(dfstest,aes(x,dfstest$P))+
geom_point()
dis1=density(dfstest$P)
plot(dis1)
dis1=density(dfstest$P,dfstest$Y)
dis1=density(dfstest$P~dfstest$Y)
dis1=density(dfstest$P+dfstest$Y)
plot(dis1)
dis1=density(dfstest$Y)
plot(dis1)
dis1=density(dfstest$P)
plot(dis1)
abline(tt$conf.int[1])
abline(v=tt$conf.int[1],tt$conf.int[2])
dis1=density(dfstest$P)
plot(dis1)
abline(v=tt$conf.int[1],tt$conf.int[2])
dis1=density(dfstest$P)
plot(dis1)
abline(v=c(tt$conf.int[1],tt$conf.int[2])
abline(lm(dfstest$P~dfstest$Y),col = c("darkgreen", "blue"),
plot(dfstest$P,dfstest$Y,xlab = "Actual Test Data",ylab = "Predicted Data")
abline(lm(dfstest$P~dfstest$Y),col = c("darkgreen", "blue"),
lty = c(1, 2), lwd = c(1, 3))
dis1=density(dfstest$P)
plot(dis1)
abline(v=c(tt$conf.int[1],tt$conf.int[2],col = c("darkgreen", "blue"),
lty = c(1, 2), lwd = c(1, 3)))
dis1=density(dfstest$P)
plot(dis1)
abline(v=c(tt$conf.int[1],tt$conf.int[2],col = c("darkgreen", "blue"))
tt$conf.int[1]
#T-test with 95% confident level
tt=t.test(dfstest$Y,dfstest$P,mu=0,alt="two.sided",conf=.95)
tt$conf.int[1]
tt$conf.int[2]
dis1=density(dfstest$P)
plot(dis1)
abline(v=c(tt$conf.int[1],tt$conf.int[2],col = c("darkgreen", "blue"))
abline(v=tt$conf.int[1],col =  "blue")
dis1=density(dfstest$P)
plot(dis1)
abline(v=tt$conf.int[1],col =  "blue")
abline(v=tt$conf.int[2], col("red"))
ggplot(dfstest, aes(x = 1:nrow(dfstest), y = value)) +  # Apply nrow function
geom_point()
ggplot(dfstest, aes(x = 1:nrow(dfstest), y = value)) +  # Apply nrow function
geom_point()
ggplot(dfstest, aes(x = 1:nrow(dfstest), y = value)) +  # Apply nrow function
geom_point(dfstest$Y)
ggplot(dfstest, aes(x = 1:nrow(dfstest), y = dfstest$Y)) +  # Apply nrow function
geom_point()
ggplot(dfstest, aes(x = , y = dfstest$Y)) +  # Apply nrow function
geom_point()
ggplot(dfstest, aes(x = value , y = dfstest$Y)) +  # Apply nrow function
geom_point()
ggplot(dfstest, aes( y = dfstest$Y)) +  # Apply nrow function
geom_point()
## plot outputs
plot(post, "output")
## set up SIR simulationmodel
transitions <- c(
"S -> beta * S * I -> I",
"I -> gamma * I -> R"
)
compartments <- c("S", "I", "R")
pars <- c("beta", "gamma")
model <- mparseRcpp(
transitions = transitions,
compartments = compartments,
pars = pars
)
model <- compileRcpp(model)
## generate function to run simulators
## and return summary statistics
simSIR <- function(pars, data, tols, u, model) {
## run model
sims <- model(pars, 0, data[2] + tols[2], u)
## this returns a vector of the form:
## completed (1/0), t, S, I, R (here)
if(sims[1] == 0) {
## if simulation rejected
return(NA)
} else {
## extract finaltime and finalsize
finaltime <- sims[2]
finalsize <- sims[5]
}
## return vector if match, else return NA
if(all(abs(c(finalsize, finaltime) - data) <= tols)){
return(c(finalsize, finaltime))
} else {
return(NA)
}
}
## set priors
priors <- data.frame(
parnames = c("beta", "gamma"),
dist = rep("gamma", 2),
stringsAsFactors = FALSE
)
priors$p1 <- c(10, 10)
priors$p2 <- c(10^4, 10^2)
## define the targeted summary statistics
data <- c(
finalsize = 30,
finaltime = 76
)
## set initial states (1 initial infection
## in population of 120)
iniStates <- c(S = 119, I = 1, R = 0)
## set initial tolerances
tols <- c(
finalsize = 50,
finaltime = 50
)
## run 2 generations of ABC-SMC
## setting tolerance to be 50th
## percentile of the accepted
## tolerances at each generation
post <- ABCSMC(
x = data,
priors = priors,
func = simSIR,
u = iniStates,
tols = tols,
ptol = 0.2,
ngen = 2,
npart = 50,
model = model
)
post
## run one further generation
post <- ABCSMC(post, ptols = 0.5, ngen = 1)
post
summary(post)
## plot posteriors
plot(post)
## plot outputs
plot(post, "output")
install.packages("abc")
gc()
help(package="abc")
np=9
no=5
nst=np+no
nst
socks=rep(1:np)
socks
socks=rep(2:np)
socks
soc=rep(2:1,c(np,no))
soc
socks=rep(1:np,rep(2:1,c(np,no)))
socks=rep(1:np,rep(2:1,c(np,no)) )
socks=rep(1:np,rep(2:1,c(np,no))
socks
socks
socks=rep(1:np,rep(2:1,c(np,no))
socks
np=9
no=5
nst=np+no
nst
socks=rep(1:np,rep(2:1,c(np,no))
socks
rep(2:1,c(np,no))
socks
np=9
no=5
nst=np+no
nst
socks=rep(1:np,
rep(2:1,c(np,no))
socks
socks=rep(1:nst,
socks
socks
np=9
no=5
nst=np+no
nst
socks=rep(1:nst,
rep(2:1,c(np,no))
socks
socks=rep(1:nst,rep(2:1,c(np,no)))
socks
socks=rep(1:np,rep(2:1,c(np,no)))
socks=rep(1:nst,rep(2:1,c(np,no)))
socks
psocks=sample(socks,11)
csocks=table(psocks)
csocks
psocks=sum(csocks==2)
usocks;psocks
usocks=sum(csocks==1)
psocks=sum(csocks==2)
usocks;psocks
psocks
psocks=sample(socks,11)
psocks
ppsocks=sum(csocks==2)
psocks=sample(socks,11)
psocks
csocks=table(psocks)
csocks
usocks=sum(csocks==1)
ppsocks=sum(csocks==2)
usocks;psocks
usocks;ppsocks
library(abc)
help("package=abc")
